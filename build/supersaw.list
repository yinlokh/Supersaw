
build/supersaw.elf:     file format elf32-littlearm


Disassembly of section .text:

20000040 <_text_start>:
  (void)api;
}

__attribute__((weak))
void _hook_cycle(const user_osc_param_t * const params, int32_t *yn, const uint32_t frames)
{
20000040:	4770      	bx	lr

20000042 <_hook_mute>:
  (void)params;
}

__attribute__((weak))
void _hook_mute(const user_osc_param_t * const params)
{
20000042:	4770      	bx	lr

20000044 <_hook_value>:
  (void)params;
}

__attribute__((weak))
void _hook_value(uint16_t value)
{
20000044:	4770      	bx	lr
  (void)value;
}

__attribute__((weak))
void _hook_param(uint16_t index, uint16_t value)
{
20000046:	4770      	bx	lr
20000048:	4770      	bx	lr
2000004a:	4770      	bx	lr
  _hook_init(platform, api);
}

__attribute__((weak))
void _hook_init(uint32_t platform, uint32_t api)
{
2000004c:	4770      	bx	lr

2000004e <_entry>:
 * @{
 */

__attribute__((used))
void _entry(uint32_t platform, uint32_t api)
{
2000004e:	4b10      	ldr	r3, [pc, #64]	; (20000090 <_entry+0x42>)
20000050:	4a10      	ldr	r2, [pc, #64]	; (20000094 <_entry+0x46>)
20000052:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
20000056:	4688      	mov	r8, r1
20000058:	4607      	mov	r7, r0
  // Ensure zero-clear BSS segment
  uint8_t * __restrict bss_p = (uint8_t *)&_bss_start;
  const uint8_t * const bss_e = (uint8_t *)&_bss_end;

  for (; bss_p != bss_e;)
    *(bss_p++) = 0;
2000005a:	2100      	movs	r1, #0
{
  // Ensure zero-clear BSS segment
  uint8_t * __restrict bss_p = (uint8_t *)&_bss_start;
  const uint8_t * const bss_e = (uint8_t *)&_bss_end;

  for (; bss_p != bss_e;)
2000005c:	4293      	cmp	r3, r2
2000005e:	d002      	beq.n	20000066 <_entry+0x18>
    *(bss_p++) = 0;
20000060:	f803 1f01 	strb.w	r1, [r3, #1]!
20000064:	e7fa      	b.n	2000005c <_entry+0xe>
20000066:	4b0c      	ldr	r3, [pc, #48]	; (20000098 <_entry+0x4a>)
20000068:	4c0c      	ldr	r4, [pc, #48]	; (2000009c <_entry+0x4e>)
2000006a:	1ae4      	subs	r4, r4, r3
2000006c:	10a4      	asrs	r4, r4, #2

  // Call constructors if any.  
  const size_t count = __init_array_end - __init_array_start;
  for (size_t i = 0; i<count; ++i) {
2000006e:	2500      	movs	r5, #0
20000070:	461e      	mov	r6, r3
20000072:	42a5      	cmp	r5, r4
20000074:	d005      	beq.n	20000082 <_entry+0x34>
    __init_fptr init_p = (__init_fptr)__init_array_start[i];
20000076:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
    if (init_p != NULL)
2000007a:	b103      	cbz	r3, 2000007e <_entry+0x30>
      init_p();
2000007c:	4798      	blx	r3
  for (; bss_p != bss_e;)
    *(bss_p++) = 0;

  // Call constructors if any.  
  const size_t count = __init_array_end - __init_array_start;
  for (size_t i = 0; i<count; ++i) {
2000007e:	3501      	adds	r5, #1
20000080:	e7f7      	b.n	20000072 <_entry+0x24>
    if (init_p != NULL)
      init_p();
  }
  
  // Call user initialization
  _hook_init(platform, api);
20000082:	4641      	mov	r1, r8
20000084:	4638      	mov	r0, r7
20000086:	f000 f80b 	bl	200000a0 <_hook_init>
2000008a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
2000008e:	bf00      	nop
20000090:	20000407 	.word	0x20000407
20000094:	2000049b 	.word	0x2000049b
20000098:	20000040 	.word	0x20000040
2000009c:	20000040 	.word	0x20000040

200000a0 <_hook_init>:
  k_flag_reset = 1<<0,
};

void OSC_INIT(uint32_t platform, uint32_t api)
{
  s_state.drive = 1.f;
200000a0:	4b08      	ldr	r3, [pc, #32]	; (200000c4 <_hook_init+0x24>)
200000a2:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
  s_state.lfo = s_state.lfoz = 0.f;
  s_state.flags = k_flags_none;
200000a6:	2100      	movs	r1, #0
  k_flag_reset = 1<<0,
};

void OSC_INIT(uint32_t platform, uint32_t api)
{
  s_state.drive = 1.f;
200000a8:	601a      	str	r2, [r3, #0]
  s_state.lfo = s_state.lfoz = 0.f;
  s_state.flags = k_flags_none;
200000aa:	7319      	strb	r1, [r3, #12]
};

void OSC_INIT(uint32_t platform, uint32_t api)
{
  s_state.drive = 1.f;
  s_state.lfo = s_state.lfoz = 0.f;
200000ac:	2200      	movs	r2, #0
  s_state.flags = k_flags_none;
  s_state.voices = 2;
200000ae:	2102      	movs	r1, #2
};

void OSC_INIT(uint32_t platform, uint32_t api)
{
  s_state.drive = 1.f;
  s_state.lfo = s_state.lfoz = 0.f;
200000b0:	609a      	str	r2, [r3, #8]
200000b2:	605a      	str	r2, [r3, #4]
  s_state.flags = k_flags_none;
  s_state.voices = 2;
200000b4:	6119      	str	r1, [r3, #16]
  s_state.detune = 10;
  s_state.noiseLevel = 0.f;
200000b6:	61da      	str	r2, [r3, #28]
{
  s_state.drive = 1.f;
  s_state.lfo = s_state.lfoz = 0.f;
  s_state.flags = k_flags_none;
  s_state.voices = 2;
  s_state.detune = 10;
200000b8:	210a      	movs	r1, #10
  s_state.noiseLevel = 0.f;
  s_state.shape = 0;
200000ba:	621a      	str	r2, [r3, #32]
  s_state.compRatio = 0.2f;
200000bc:	4a02      	ldr	r2, [pc, #8]	; (200000c8 <_hook_init+0x28>)
{
  s_state.drive = 1.f;
  s_state.lfo = s_state.lfoz = 0.f;
  s_state.flags = k_flags_none;
  s_state.voices = 2;
  s_state.detune = 10;
200000be:	6199      	str	r1, [r3, #24]
  s_state.noiseLevel = 0.f;
  s_state.shape = 0;
  s_state.compRatio = 0.2f;
200000c0:	631a      	str	r2, [r3, #48]	; 0x30
200000c2:	4770      	bx	lr
200000c4:	20000408 	.word	0x20000408
200000c8:	3e4ccccd 	.word	0x3e4ccccd

200000cc <_hook_cycle>:
}

void OSC_CYCLE(const user_osc_param_t * const params,
               int32_t *yn,
               const uint32_t frames)
{  
200000cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  const uint8_t flags = s_state.flags;
200000d0:	4c94      	ldr	r4, [pc, #592]	; (20000324 <_hook_cycle+0x258>)
  s_state.flags = k_flags_none;
  
  const float drive = s_state.drive;

  const float lfo = s_state.lfo = q31_to_f32(params->shape_lfo);
200000d2:	edd0 7a00 	vldr	s15, [r0]

void OSC_CYCLE(const user_osc_param_t * const params,
               int32_t *yn,
               const uint32_t frames)
{  
  const uint8_t flags = s_state.flags;
200000d6:	f894 a00c 	ldrb.w	sl, [r4, #12]
  const float lfo_inc = (lfo - lfoz) / frames;
  
  q31_t * __restrict y = (q31_t *)yn;
  const q31_t * y_e = y + frames;

  uint8_t voices = s_state.voices;
200000da:	6925      	ldr	r5, [r4, #16]
200000dc:	4e92      	ldr	r6, [pc, #584]	; (20000328 <_hook_cycle+0x25c>)
200000de:	f894 b018 	ldrb.w	fp, [r4, #24]
  const uint8_t flags = s_state.flags;
  s_state.flags = k_flags_none;
  
  const float drive = s_state.drive;

  const float lfo = s_state.lfo = q31_to_f32(params->shape_lfo);
200000e2:	eefa 7ae0 	vcvt.f32.s32	s15, s15, #31
}

void OSC_CYCLE(const user_osc_param_t * const params,
               int32_t *yn,
               const uint32_t frames)
{  
200000e6:	4688      	mov	r8, r1
  s_state.flags = k_flags_none;
  
  const float drive = s_state.drive;

  const float lfo = s_state.lfo = q31_to_f32(params->shape_lfo);
  float lfoz = (flags & k_flag_reset) ? lfo : s_state.lfoz;
200000e8:	f01a 0101 	ands.w	r1, sl, #1
}

void OSC_CYCLE(const user_osc_param_t * const params,
               int32_t *yn,
               const uint32_t frames)
{  
200000ec:	ed2d 8b08 	vpush	{d8-d11}
  
  const float drive = s_state.drive;

  const float lfo = s_state.lfo = q31_to_f32(params->shape_lfo);
  float lfoz = (flags & k_flag_reset) ? lfo : s_state.lfoz;
  const float lfo_inc = (lfo - lfoz) / frames;
200000f0:	ee07 2a10 	vmov	s14, r2
  s_state.flags = k_flags_none;
  
  const float drive = s_state.drive;

  const float lfo = s_state.lfo = q31_to_f32(params->shape_lfo);
  float lfoz = (flags & k_flag_reset) ? lfo : s_state.lfoz;
200000f4:	bf08      	it	eq
200000f6:	ed94 9a02 	vldreq	s18, [r4, #8]
  const uint8_t flags = s_state.flags;
  s_state.flags = k_flags_none;
  
  const float drive = s_state.drive;

  const float lfo = s_state.lfo = q31_to_f32(params->shape_lfo);
200000fa:	edc4 7a01 	vstr	s15, [r4, #4]
  float lfoz = (flags & k_flag_reset) ? lfo : s_state.lfoz;
200000fe:	bf18      	it	ne
20000100:	eeb0 9a67 	vmovne.f32	s18, s15
  const float lfo_inc = (lfo - lfoz) / frames;
20000104:	ee77 7ac9 	vsub.f32	s15, s15, s18
20000108:	eeb8 7a47 	vcvt.f32.u32	s14, s14
void OSC_CYCLE(const user_osc_param_t * const params,
               int32_t *yn,
               const uint32_t frames)
{  
  const uint8_t flags = s_state.flags;
  s_state.flags = k_flags_none;
2000010c:	2300      	movs	r3, #0
  
  const float drive = s_state.drive;

  const float lfo = s_state.lfo = q31_to_f32(params->shape_lfo);
  float lfoz = (flags & k_flag_reset) ? lfo : s_state.lfoz;
  const float lfo_inc = (lfo - lfoz) / frames;
2000010e:	ee87 8a87 	vdiv.f32	s16, s15, s14
void OSC_CYCLE(const user_osc_param_t * const params,
               int32_t *yn,
               const uint32_t frames)
{  
  const uint8_t flags = s_state.flags;
  s_state.flags = k_flags_none;
20000112:	7323      	strb	r3, [r4, #12]

  uint8_t voices = s_state.voices;
  uint8_t detune = s_state.detune;

  // reset instances phase increment and phase
  uint8_t pitch = params->pitch >> 8; 
20000114:	8883      	ldrh	r3, [r0, #4]
20000116:	f3c5 0746 	ubfx	r7, r5, #1, #7
  const float lfo = s_state.lfo = q31_to_f32(params->shape_lfo);
  float lfoz = (flags & k_flag_reset) ? lfo : s_state.lfoz;
  const float lfo_inc = (lfo - lfoz) / frames;
  
  q31_t * __restrict y = (q31_t *)yn;
  const q31_t * y_e = y + frames;
2000011a:	eb08 0982 	add.w	r9, r8, r2, lsl #2
2000011e:	b2ed      	uxtb	r5, r5
   *
   * @param note Note in [0-151] range.
   * @return     Corresponding Hertz value.
   */
  __fast_inline float osc_notehzf(uint8_t note) {
    return midi_to_hz_lut_f[clipmaxu32(note,k_midi_to_hz_size-1)];
20000120:	4a82      	ldr	r2, [pc, #520]	; (2000032c <_hook_cycle+0x260>)
20000122:	eb06 05c5 	add.w	r5, r6, r5, lsl #3

  uint8_t voices = s_state.voices;
  uint8_t detune = s_state.detune;

  // reset instances phase increment and phase
  uint8_t pitch = params->pitch >> 8; 
20000126:	ea4f 2a13 	mov.w	sl, r3, lsr #8
2000012a:	b2db      	uxtb	r3, r3
}

void OSC_CYCLE(const user_osc_param_t * const params,
               int32_t *yn,
               const uint32_t frames)
{  
2000012c:	b085      	sub	sp, #20
2000012e:	fb07 371b 	mls	r7, r7, fp, r3
  const uint8_t flags = s_state.flags;
  s_state.flags = k_flags_none;
  
  const float drive = s_state.drive;
20000132:	edd4 8a00 	vldr	s17, [r4]

/** Linear interpolation
 */
static inline __attribute__((optimize("Ofast"), always_inline))
float linintf(const float fr, const float x0, const float x1) {
  return x0 + fr * (x1 - x0);
20000136:	eddf 9a7e 	vldr	s19, [pc, #504]	; 20000330 <_hook_cycle+0x264>
2000013a:	3504      	adds	r5, #4

  // reset instances phase increment and phase
  uint8_t pitch = params->pitch >> 8; 
  uint8_t mod = params->pitch & 0xFF;
  int i;
  int32_t fineAdj = -1 * (voices >> 1) * detune;
2000013c:	3604      	adds	r6, #4
2000013e:	4610      	mov	r0, r2
  for (i = 0; i < voices; i++) {
20000140:	42ae      	cmp	r6, r5
20000142:	d056      	beq.n	200001f2 <_hook_cycle+0x126>
	// high byte = note number, low byte = fine
	// mod 0 - 255 only adds to original pitch, negative mod applied as note - 1 + (255 + mod)
	uint16_t res = 0;

	// apply fine adjustment
	int32_t pitchChange = (fineAdjust + mod) / 255;
20000144:	23ff      	movs	r3, #255	; 0xff
20000146:	fb97 f3f3 	sdiv	r3, r7, r3
	int32_t adjustedMod = (fineAdjust + mod) % 255;
2000014a:	ebc3 2e03 	rsb	lr, r3, r3, lsl #8
	if (adjustedMod < 0) {
2000014e:	ebb7 0e0e 	subs.w	lr, r7, lr
		pitchChange--;
20000152:	bf44      	itt	mi
20000154:	f103 33ff 	addmi.w	r3, r3, #4294967295
		adjustedMod += 0xFF;
20000158:	f10e 0eff 	addmi.w	lr, lr, #255	; 0xff
	} 
	pitch += pitchChange;
	mod = adjustedMod;

	res = pitch;
2000015c:	4453      	add	r3, sl
	res = res << 8;
	res |= mod;
2000015e:	ea4e 2303 	orr.w	r3, lr, r3, lsl #8
20000162:	b29b      	uxth	r3, r3
  int i;
  int32_t fineAdj = -1 * (voices >> 1) * detune;
  for (i = 0; i < voices; i++) {
		uint16_t voicePitch = adjustPitch(pitch, mod, fineAdj);
		fineAdj += detune;
		instances[i].w0 = osc_w0f_for_note(voicePitch >> 8, voicePitch & 0xFF);
20000164:	ea4f 2e23 	mov.w	lr, r3, asr #8
20000168:	f1be 0f96 	cmp.w	lr, #150	; 0x96
2000016c:	b2db      	uxtb	r3, r3
2000016e:	ee07 3a90 	vmov	s15, r3
20000172:	bfd8      	it	le
20000174:	4673      	movle	r3, lr
   * @param note Note in [0-151] range, mod in [0-255] range.
   * @return     Corresponding 0-1 phase increment in floating point.
   */
  __fast_inline float osc_w0f_for_note(uint8_t note, uint8_t mod) {    
    const float f0 = osc_notehzf(note);
    const float f1 = osc_notehzf(note+1);
20000176:	f10e 0e01 	add.w	lr, lr, #1
2000017a:	fa5f fe8e 	uxtb.w	lr, lr
   *
   * @param note Note in [0-151] range.
   * @return     Corresponding Hertz value.
   */
  __fast_inline float osc_notehzf(uint8_t note) {
    return midi_to_hz_lut_f[clipmaxu32(note,k_midi_to_hz_size-1)];
2000017e:	bfc8      	it	gt
20000180:	2397      	movgt	r3, #151	; 0x97
20000182:	f1be 0f96 	cmp.w	lr, #150	; 0x96
20000186:	bf88      	it	hi
20000188:	f04f 0e97 	movhi.w	lr, #151	; 0x97
2000018c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
20000190:	eb00 0e8e 	add.w	lr, r0, lr, lsl #2
20000194:	ed93 7a00 	vldr	s14, [r3]
20000198:	edde 6a00 	vldr	s13, [lr]
2000019c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
200001a0:	ee76 6ac7 	vsub.f32	s13, s13, s14
200001a4:	ee67 7aa9 	vmul.f32	s15, s15, s19
200001a8:	eea7 7aa6 	vfma.f32	s14, s15, s13

/** FSEL construct
 */
static inline __attribute__((optimize("Ofast"),always_inline))
float fsel(const float a, const float b, const float c) {
  return (a >= 0) ? b : c;
200001ac:	eddf 7a61 	vldr	s15, [pc, #388]	; 20000334 <_hook_cycle+0x268>
200001b0:	eeb4 7ae7 	vcmpe.f32	s14, s15
200001b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
200001b8:	bfb8      	it	lt
200001ba:	eef0 7a47 	vmovlt.f32	s15, s14
200001be:	ed9f 7a5e 	vldr	s14, [pc, #376]	; 20000338 <_hook_cycle+0x26c>
200001c2:	ee67 7a87 	vmul.f32	s15, s15, s14
200001c6:	edc6 7a00 	vstr	s15, [r6]
		if (flags & k_flag_reset) {
200001ca:	b179      	cbz	r1, 200001ec <_hook_cycle+0x120>
			instances[i].phase = s_state.phaseSync ? 0.f : osc_white();
200001cc:	f994 3024 	ldrsb.w	r3, [r4, #36]	; 0x24
200001d0:	b943      	cbnz	r3, 200001e4 <_hook_cycle+0x118>
200001d2:	9003      	str	r0, [sp, #12]
200001d4:	9202      	str	r2, [sp, #8]
200001d6:	9101      	str	r1, [sp, #4]
   * @return     Value in [-1.0, 1.0].
   */
  float _osc_white(void);

  __fast_inline float osc_white(void) {
    return _osc_white();
200001d8:	f000 f90c 	bl	200003f4 <___osc_white_veneer>
200001dc:	9901      	ldr	r1, [sp, #4]
200001de:	9a02      	ldr	r2, [sp, #8]
200001e0:	9803      	ldr	r0, [sp, #12]
200001e2:	e001      	b.n	200001e8 <_hook_cycle+0x11c>
200001e4:	ed9f 0a55 	vldr	s0, [pc, #340]	; 2000033c <_hook_cycle+0x270>
200001e8:	ed06 0a01 	vstr	s0, [r6, #-4]
200001ec:	3608      	adds	r6, #8
200001ee:	445f      	add	r7, fp
  // reset instances phase increment and phase
  uint8_t pitch = params->pitch >> 8; 
  uint8_t mod = params->pitch & 0xFF;
  int i;
  int32_t fineAdj = -1 * (voices >> 1) * detune;
  for (i = 0; i < voices; i++) {
200001f0:	e7a6      	b.n	20000140 <_hook_cycle+0x74>
200001f2:	eef7 9a00 	vmov.f32	s19, #112	; 0x3f800000  1.0
		totalSig += oscillator(phase);
		phase += instances[i].w0;
		phase -= (uint32_t) phase;
		instances[i].phase = phase;
	}
	totalSig *= s_state.voiceLevel;
200001f6:	4e4b      	ldr	r6, [pc, #300]	; (20000324 <_hook_cycle+0x258>)
200001f8:	eeb0 ba69 	vmov.f32	s22, s19
			instances[i].phase = s_state.phaseSync ? 0.f : osc_white();
		}
  }
  
  // write to buffer
  for (; y != y_e; ) {
200001fc:	45c8      	cmp	r8, r9
200001fe:	f000 8089 	beq.w	20000314 <_hook_cycle+0x248>
}

__fast_inline float oscillator(float phase) {
	float saw = (2.0f - 2 * phase) - 1.0f;
	float sqr = phase > 0.5f ? -1.0f : 1.0f;
	return (1.0f - s_state.shape) * saw + (s_state.shape) * sqr;
20000202:	ed94 6a08 	vldr	s12, [r4, #32]
20000206:	4b4e      	ldr	r3, [pc, #312]	; (20000340 <_hook_cycle+0x274>)
20000208:	ed9f 7a4c 	vldr	s14, [pc, #304]	; 2000033c <_hook_cycle+0x270>
2000020c:	eeff 5a00 	vmov.f32	s11, #240	; 0xbf800000 -1.0
	res |= mod;
	return res;
}

__fast_inline float oscillator(float phase) {
	float saw = (2.0f - 2 * phase) - 1.0f;
20000210:	eef0 3a00 	vmov.f32	s7, #0	; 0x40000000  2.0
	float sqr = phase > 0.5f ? -1.0f : 1.0f;
20000214:	eeb6 4a00 	vmov.f32	s8, #96	; 0x3f000000  0.5
  }
  
  // write to buffer
  for (; y != y_e; ) {
	float totalSig = 0.0f;
	for (i = 0; i < voices; i++) {
20000218:	429d      	cmp	r5, r3
2000021a:	d026      	beq.n	2000026a <_hook_cycle+0x19e>
		float phase = instances[i].phase;
2000021c:	ed53 7a01 	vldr	s15, [r3, #-4]
	res |= mod;
	return res;
}

__fast_inline float oscillator(float phase) {
	float saw = (2.0f - 2 * phase) - 1.0f;
20000220:	ee79 6ae7 	vsub.f32	s13, s19, s15
	float sqr = phase > 0.5f ? -1.0f : 1.0f;
20000224:	eef4 7ac4 	vcmpe.f32	s15, s8
	res |= mod;
	return res;
}

__fast_inline float oscillator(float phase) {
	float saw = (2.0f - 2 * phase) - 1.0f;
20000228:	eef0 4a65 	vmov.f32	s9, s11
2000022c:	eee6 4aa3 	vfma.f32	s9, s13, s7
20000230:	3308      	adds	r3, #8
	float sqr = phase > 0.5f ? -1.0f : 1.0f;
20000232:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
20000236:	bfd4      	ite	le
20000238:	eef0 6a69 	vmovle.f32	s13, s19
2000023c:	eef0 6a65 	vmovgt.f32	s13, s11
  // write to buffer
  for (; y != y_e; ) {
	float totalSig = 0.0f;
	for (i = 0; i < voices; i++) {
		float phase = instances[i].phase;
		totalSig += oscillator(phase);
20000240:	ee66 6a26 	vmul.f32	s13, s12, s13
20000244:	ee39 5ac6 	vsub.f32	s10, s19, s12
20000248:	eee4 6a85 	vfma.f32	s13, s9, s10
2000024c:	ee37 7a26 	vadd.f32	s14, s14, s13
		phase += instances[i].w0;
20000250:	ed53 6a02 	vldr	s13, [r3, #-8]
20000254:	ee77 7aa6 	vadd.f32	s15, s15, s13
		phase -= (uint32_t) phase;
20000258:	eefc 6ae7 	vcvt.u32.f32	s13, s15
2000025c:	eef8 6a66 	vcvt.f32.u32	s13, s13
		instances[i].phase = phase;
20000260:	ee77 7ae6 	vsub.f32	s15, s15, s13
20000264:	ed43 7a03 	vstr	s15, [r3, #-12]
  }
  
  // write to buffer
  for (; y != y_e; ) {
	float totalSig = 0.0f;
	for (i = 0; i < voices; i++) {
20000268:	e7d6      	b.n	20000218 <_hook_cycle+0x14c>
		totalSig += oscillator(phase);
		phase += instances[i].w0;
		phase -= (uint32_t) phase;
		instances[i].phase = phase;
	}
	totalSig *= s_state.voiceLevel;
2000026a:	ed94 aa05 	vldr	s20, [r4, #20]
	totalSig = totalSig * (1.f - s_state.noiseLevel) + osc_white() * s_state.noiseLevel;
2000026e:	edd4 aa07 	vldr	s21, [r4, #28]
		totalSig += oscillator(phase);
		phase += instances[i].w0;
		phase -= (uint32_t) phase;
		instances[i].phase = phase;
	}
	totalSig *= s_state.voiceLevel;
20000272:	ee27 aa0a 	vmul.f32	s20, s14, s20
20000276:	f000 f8bd 	bl	200003f4 <___osc_white_veneer>
	totalSig = totalSig * (1.f - s_state.noiseLevel) + osc_white() * s_state.noiseLevel;
2000027a:	edd4 7a07 	vldr	s15, [r4, #28]
	float sqr = phase > 0.5f ? -1.0f : 1.0f;
	return (1.0f - s_state.shape) * saw + (s_state.shape) * sqr;
}

__fast_inline float compress(float sig) {
	if (sig > s_state.compThreshold) {
2000027e:	ed94 7a0a 	vldr	s14, [r4, #40]	; 0x28
		phase += instances[i].w0;
		phase -= (uint32_t) phase;
		instances[i].phase = phase;
	}
	totalSig *= s_state.voiceLevel;
	totalSig = totalSig * (1.f - s_state.noiseLevel) + osc_white() * s_state.noiseLevel;
20000282:	ee7b aa6a 	vsub.f32	s21, s22, s21
20000286:	ee20 0a27 	vmul.f32	s0, s0, s15
2000028a:	eeaa 0a2a 	vfma.f32	s0, s20, s21
	float sqr = phase > 0.5f ? -1.0f : 1.0f;
	return (1.0f - s_state.shape) * saw + (s_state.shape) * sqr;
}

__fast_inline float compress(float sig) {
	if (sig > s_state.compThreshold) {
2000028e:	eeb4 0ac7 	vcmpe.f32	s0, s14
20000292:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
20000296:	dd08      	ble.n	200002aa <_hook_cycle+0x1de>
		sig = s_state.compThreshold + (sig - s_state.compThreshold) * s_state.compRatio;
20000298:	ee70 7a47 	vsub.f32	s15, s0, s14
2000029c:	edd6 6a0c 	vldr	s13, [r6, #48]	; 0x30
200002a0:	eea7 7aa6 	vfma.f32	s14, s15, s13
200002a4:	eeb0 0a47 	vmov.f32	s0, s14
200002a8:	e00e      	b.n	200002c8 <_hook_cycle+0x1fc>
	} else if (sig < -s_state.compThreshold) {
200002aa:	eef1 7a47 	vneg.f32	s15, s14
200002ae:	eeb4 0ae7 	vcmpe.f32	s0, s15
200002b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
		sig = -s_state.compThreshold + (sig + s_state.compThreshold) * s_state.compRatio;
200002b6:	bf41      	itttt	mi
200002b8:	ee30 0a07 	vaddmi.f32	s0, s0, s14
200002bc:	ed96 7a0c 	vldrmi	s14, [r6, #48]	; 0x30
200002c0:	eee0 7a07 	vfmami.f32	s15, s0, s14
200002c4:	eeb0 0a67 	vmovmi.f32	s0, s15
		instances[i].phase = phase;
	}
	totalSig *= s_state.voiceLevel;
	totalSig = totalSig * (1.f - s_state.noiseLevel) + osc_white() * s_state.noiseLevel;
	totalSig = compress(totalSig);
	const float sig  = osc_softclipf(0.05f, drive * totalSig);
200002c8:	edd4 7a0b 	vldr	s15, [r4, #44]	; 0x2c
200002cc:	ee20 0a27 	vmul.f32	s0, s0, s15
200002d0:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
200002d4:	ee20 0a28 	vmul.f32	s0, s0, s17
200002d8:	eeb4 0ae7 	vcmpe.f32	s0, s15
200002dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
200002e0:	db07      	blt.n	200002f2 <_hook_cycle+0x226>
200002e2:	eeb4 0acb 	vcmpe.f32	s0, s22
200002e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
200002ea:	bfa8      	it	ge
200002ec:	eeb0 0a69 	vmovge.f32	s0, s19
200002f0:	e001      	b.n	200002f6 <_hook_cycle+0x22a>
200002f2:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
	*(y++) = f32_to_q31(sig);
200002f6:	ee60 7a00 	vmul.f32	s15, s0, s0
200002fa:	ed9f 7a12 	vldr	s14, [pc, #72]	; 20000344 <_hook_cycle+0x278>
200002fe:	ee60 7a67 	vnmul.f32	s15, s0, s15
    lfoz += lfo_inc;
20000302:	ee39 9a08 	vadd.f32	s18, s18, s16
	}
	totalSig *= s_state.voiceLevel;
	totalSig = totalSig * (1.f - s_state.noiseLevel) + osc_white() * s_state.noiseLevel;
	totalSig = compress(totalSig);
	const float sig  = osc_softclipf(0.05f, drive * totalSig);
	*(y++) = f32_to_q31(sig);
20000306:	eea7 0a87 	vfma.f32	s0, s15, s14
2000030a:	eebe 0ae0 	vcvt.s32.f32	s0, s0, #31
2000030e:	eca8 0a01 	vstmia	r8!, {s0}
			instances[i].phase = s_state.phaseSync ? 0.f : osc_white();
		}
  }
  
  // write to buffer
  for (; y != y_e; ) {
20000312:	e773      	b.n	200001fc <_hook_cycle+0x130>
	const float sig  = osc_softclipf(0.05f, drive * totalSig);
	*(y++) = f32_to_q31(sig);
    lfoz += lfo_inc;
  }
  
  s_state.lfoz = lfoz;
20000314:	ed84 9a02 	vstr	s18, [r4, #8]
}
20000318:	b005      	add	sp, #20
2000031a:	ecbd 8b08 	vpop	{d8-d11}
2000031e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
20000322:	bf00      	nop
20000324:	20000408 	.word	0x20000408
20000328:	2000043c 	.word	0x2000043c
2000032c:	0800f100 	.word	0x0800f100
20000330:	3b808081 	.word	0x3b808081
20000334:	46b8ff49 	.word	0x46b8ff49
20000338:	37aec33e 	.word	0x37aec33e
2000033c:	00000000 	.word	0x00000000
20000340:	20000440 	.word	0x20000440
20000344:	3d4ccccd 	.word	0x3d4ccccd

20000348 <_hook_on>:

void OSC_NOTEON(const user_osc_param_t * const params)
{
  s_state.flags |= k_flag_reset;
20000348:	4a02      	ldr	r2, [pc, #8]	; (20000354 <_hook_on+0xc>)
2000034a:	7b13      	ldrb	r3, [r2, #12]
2000034c:	f043 0301 	orr.w	r3, r3, #1
20000350:	7313      	strb	r3, [r2, #12]
20000352:	4770      	bx	lr
20000354:	20000408 	.word	0x20000408

20000358 <_hook_off>:
}

void OSC_NOTEOFF(const user_osc_param_t * const params)
{
20000358:	4770      	bx	lr

2000035a <_hook_param>:
  (void)params;
}

void OSC_PARAM(uint16_t index, uint16_t value)
{
  const float valf = param_val_to_f32(value);
2000035a:	ee07 1a90 	vmov	s15, r1
2000035e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
  
  switch (index) {
20000362:	2806      	cmp	r0, #6
20000364:	d83e      	bhi.n	200003e4 <_hook_param+0x8a>
20000366:	e8df f000 	tbb	[pc, r0]
2000036a:	1204      	.short	0x1204
2000036c:	3d221e16 	.word	0x3d221e16
20000370:	36          	.byte	0x36
20000371:	00          	.byte	0x00
  case k_user_osc_param_id1:
	 s_state.voices = value + 1;
20000372:	3101      	adds	r1, #1
	 s_state.voiceLevel = 1.f / s_state.voices;
20000374:	ee07 1a90 	vmov	s15, r1
20000378:	eef8 7ae7 	vcvt.f32.s32	s15, s15
2000037c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
20000380:	ee86 7aa7 	vdiv.f32	s14, s13, s15
{
  const float valf = param_val_to_f32(value);
  
  switch (index) {
  case k_user_osc_param_id1:
	 s_state.voices = value + 1;
20000384:	4b18      	ldr	r3, [pc, #96]	; (200003e8 <_hook_param+0x8e>)
20000386:	6119      	str	r1, [r3, #16]
	 s_state.voiceLevel = 1.f / s_state.voices;
20000388:	ed83 7a05 	vstr	s14, [r3, #20]
	 break;
2000038c:	4770      	bx	lr
  case k_user_osc_param_id2:
	 s_state.detune = value + 1;
2000038e:	4b16      	ldr	r3, [pc, #88]	; (200003e8 <_hook_param+0x8e>)
20000390:	3101      	adds	r1, #1
20000392:	6199      	str	r1, [r3, #24]
	 break;
20000394:	4770      	bx	lr
  case k_user_osc_param_id3:
	 s_state.noiseLevel = value / 100.f;
20000396:	eddf 6a15 	vldr	s13, [pc, #84]	; 200003ec <_hook_param+0x92>
2000039a:	4b13      	ldr	r3, [pc, #76]	; (200003e8 <_hook_param+0x8e>)
2000039c:	ee87 7aa6 	vdiv.f32	s14, s15, s13
200003a0:	ed83 7a07 	vstr	s14, [r3, #28]
	 break;
200003a4:	4770      	bx	lr
  case k_user_osc_param_id4:
	 s_state.phaseSync = value;
200003a6:	4b10      	ldr	r3, [pc, #64]	; (200003e8 <_hook_param+0x8e>)
200003a8:	f883 1024 	strb.w	r1, [r3, #36]	; 0x24
	 break;
200003ac:	4770      	bx	lr
  case k_user_osc_param_id5:
	 s_state.compThreshold = value / 100.f;
200003ae:	eddf 6a0f 	vldr	s13, [pc, #60]	; 200003ec <_hook_param+0x92>
200003b2:	4b0d      	ldr	r3, [pc, #52]	; (200003e8 <_hook_param+0x8e>)
200003b4:	ee87 7aa6 	vdiv.f32	s14, s15, s13
	 s_state.compGain = 1 / (s_state.compThreshold + (1.0f - s_state.compThreshold) * s_state.compRatio);
200003b8:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
200003bc:	edd3 6a0c 	vldr	s13, [r3, #48]	; 0x30
	 break;
  case k_user_osc_param_id4:
	 s_state.phaseSync = value;
	 break;
  case k_user_osc_param_id5:
	 s_state.compThreshold = value / 100.f;
200003c0:	ed83 7a0a 	vstr	s14, [r3, #40]	; 0x28
	 s_state.compGain = 1 / (s_state.compThreshold + (1.0f - s_state.compThreshold) * s_state.compRatio);
200003c4:	ee37 6ac7 	vsub.f32	s12, s15, s14
200003c8:	eea6 7a26 	vfma.f32	s14, s12, s13
200003cc:	eec7 6a87 	vdiv.f32	s13, s15, s14
200003d0:	edc3 6a0b 	vstr	s13, [r3, #44]	; 0x2c
	 break;
200003d4:	4770      	bx	lr
  case k_user_osc_param_shape:
     s_state.shape = valf;
200003d6:	ed9f 7a06 	vldr	s14, [pc, #24]	; 200003f0 <_hook_param+0x96>
200003da:	4b03      	ldr	r3, [pc, #12]	; (200003e8 <_hook_param+0x8e>)
200003dc:	ee67 7a87 	vmul.f32	s15, s15, s14
200003e0:	edc3 7a08 	vstr	s15, [r3, #32]
200003e4:	4770      	bx	lr
200003e6:	bf00      	nop
200003e8:	20000408 	.word	0x20000408
200003ec:	42c80000 	.word	0x42c80000
200003f0:	3a802008 	.word	0x3a802008

200003f4 <___osc_white_veneer>:
200003f4:	f85f f000 	ldr.w	pc, [pc]	; 200003f8 <___osc_white_veneer+0x4>
200003f8:	0801edb9 	.word	0x0801edb9
