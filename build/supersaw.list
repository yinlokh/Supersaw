
build/supersaw.elf:     file format elf32-littlearm


Disassembly of section .text:

20000040 <_text_start>:
  (void)api;
}

__attribute__((weak))
void _hook_cycle(const user_osc_param_t * const params, int32_t *yn, const uint32_t frames)
{
20000040:	4770      	bx	lr

20000042 <_hook_mute>:
  (void)params;
}

__attribute__((weak))
void _hook_mute(const user_osc_param_t * const params)
{
20000042:	4770      	bx	lr

20000044 <_hook_value>:
  (void)params;
}

__attribute__((weak))
void _hook_value(uint16_t value)
{
20000044:	4770      	bx	lr
  (void)value;
}

__attribute__((weak))
void _hook_param(uint16_t index, uint16_t value)
{
20000046:	4770      	bx	lr
20000048:	4770      	bx	lr
2000004a:	4770      	bx	lr
  _hook_init(platform, api);
}

__attribute__((weak))
void _hook_init(uint32_t platform, uint32_t api)
{
2000004c:	4770      	bx	lr

2000004e <_entry>:
 * @{
 */

__attribute__((used))
void _entry(uint32_t platform, uint32_t api)
{
2000004e:	4b10      	ldr	r3, [pc, #64]	; (20000090 <_entry+0x42>)
20000050:	4a10      	ldr	r2, [pc, #64]	; (20000094 <_entry+0x46>)
20000052:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
20000056:	4688      	mov	r8, r1
20000058:	4607      	mov	r7, r0
  // Ensure zero-clear BSS segment
  uint8_t * __restrict bss_p = (uint8_t *)&_bss_start;
  const uint8_t * const bss_e = (uint8_t *)&_bss_end;

  for (; bss_p != bss_e;)
    *(bss_p++) = 0;
2000005a:	2100      	movs	r1, #0
{
  // Ensure zero-clear BSS segment
  uint8_t * __restrict bss_p = (uint8_t *)&_bss_start;
  const uint8_t * const bss_e = (uint8_t *)&_bss_end;

  for (; bss_p != bss_e;)
2000005c:	4293      	cmp	r3, r2
2000005e:	d002      	beq.n	20000066 <_entry+0x18>
    *(bss_p++) = 0;
20000060:	f803 1f01 	strb.w	r1, [r3, #1]!
20000064:	e7fa      	b.n	2000005c <_entry+0xe>
20000066:	4b0c      	ldr	r3, [pc, #48]	; (20000098 <_entry+0x4a>)
20000068:	4c0c      	ldr	r4, [pc, #48]	; (2000009c <_entry+0x4e>)
2000006a:	1ae4      	subs	r4, r4, r3
2000006c:	10a4      	asrs	r4, r4, #2

  // Call constructors if any.  
  const size_t count = __init_array_end - __init_array_start;
  for (size_t i = 0; i<count; ++i) {
2000006e:	2500      	movs	r5, #0
20000070:	461e      	mov	r6, r3
20000072:	42a5      	cmp	r5, r4
20000074:	d005      	beq.n	20000082 <_entry+0x34>
    __init_fptr init_p = (__init_fptr)__init_array_start[i];
20000076:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
    if (init_p != NULL)
2000007a:	b103      	cbz	r3, 2000007e <_entry+0x30>
      init_p();
2000007c:	4798      	blx	r3
  for (; bss_p != bss_e;)
    *(bss_p++) = 0;

  // Call constructors if any.  
  const size_t count = __init_array_end - __init_array_start;
  for (size_t i = 0; i<count; ++i) {
2000007e:	3501      	adds	r5, #1
20000080:	e7f7      	b.n	20000072 <_entry+0x24>
    if (init_p != NULL)
      init_p();
  }
  
  // Call user initialization
  _hook_init(platform, api);
20000082:	4641      	mov	r1, r8
20000084:	4638      	mov	r0, r7
20000086:	f000 f80b 	bl	200000a0 <_hook_init>
2000008a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
2000008e:	bf00      	nop
20000090:	2000040f 	.word	0x2000040f
20000094:	200004c3 	.word	0x200004c3
20000098:	20000040 	.word	0x20000040
2000009c:	20000040 	.word	0x20000040

200000a0 <_hook_init>:
  k_flag_reset = 1<<0,
};

void OSC_INIT(uint32_t platform, uint32_t api)
{
  s_state.drive = 1.f;
200000a0:	4b07      	ldr	r3, [pc, #28]	; (200000c0 <_hook_init+0x20>)
200000a2:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
  s_state.lfo = s_state.lfoz = 0.f;
  s_state.flags = k_flags_none;
  s_state.voices = 2;
200000a6:	2002      	movs	r0, #2

void OSC_INIT(uint32_t platform, uint32_t api)
{
  s_state.drive = 1.f;
  s_state.lfo = s_state.lfoz = 0.f;
  s_state.flags = k_flags_none;
200000a8:	2100      	movs	r1, #0
  k_flag_reset = 1<<0,
};

void OSC_INIT(uint32_t platform, uint32_t api)
{
  s_state.drive = 1.f;
200000aa:	601a      	str	r2, [r3, #0]
  s_state.lfo = s_state.lfoz = 0.f;
  s_state.flags = k_flags_none;
  s_state.voices = 2;
200000ac:	6118      	str	r0, [r3, #16]
};

void OSC_INIT(uint32_t platform, uint32_t api)
{
  s_state.drive = 1.f;
  s_state.lfo = s_state.lfoz = 0.f;
200000ae:	2200      	movs	r2, #0
  s_state.flags = k_flags_none;
  s_state.voices = 2;
  s_state.detune = 10;
200000b0:	200a      	movs	r0, #10
};

void OSC_INIT(uint32_t platform, uint32_t api)
{
  s_state.drive = 1.f;
  s_state.lfo = s_state.lfoz = 0.f;
200000b2:	609a      	str	r2, [r3, #8]
200000b4:	605a      	str	r2, [r3, #4]
  s_state.flags = k_flags_none;
200000b6:	7319      	strb	r1, [r3, #12]
  s_state.voices = 2;
  s_state.detune = 10;
200000b8:	6158      	str	r0, [r3, #20]
  s_state.noiseLevel = 0.f;
200000ba:	619a      	str	r2, [r3, #24]
  s_state.waveform = 0;
200000bc:	7719      	strb	r1, [r3, #28]
200000be:	4770      	bx	lr
200000c0:	20000410 	.word	0x20000410

200000c4 <_hook_cycle>:
}

void OSC_CYCLE(const user_osc_param_t * const params,
               int32_t *yn,
               const uint32_t frames)
{  
200000c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  const uint8_t flags = s_state.flags;
200000c8:	4c8b      	ldr	r4, [pc, #556]	; (200002f8 <_hook_cycle+0x234>)
  s_state.flags = k_flags_none;
  
  const float drive = s_state.drive;

  const float lfo = s_state.lfo = q31_to_f32(params->shape_lfo);
200000ca:	edd0 7a00 	vldr	s15, [r0]

void OSC_CYCLE(const user_osc_param_t * const params,
               int32_t *yn,
               const uint32_t frames)
{  
  const uint8_t flags = s_state.flags;
200000ce:	f894 800c 	ldrb.w	r8, [r4, #12]
  const float lfo_inc = (lfo - lfoz) / frames;
  
  q31_t * __restrict y = (q31_t *)yn;
  const q31_t * y_e = y + frames;

  uint8_t voices = s_state.voices;
200000d2:	f8d4 9010 	ldr.w	r9, [r4, #16]
   *
   * @param note Note in [0-151] range.
   * @return     Corresponding Hertz value.
   */
  __fast_inline float osc_notehzf(uint8_t note) {
    return midi_to_hz_lut_f[clipmaxu32(note,k_midi_to_hz_size-1)];
200000d6:	f8df b244 	ldr.w	fp, [pc, #580]	; 2000031c <_hook_cycle+0x258>
200000da:	4f88      	ldr	r7, [pc, #544]	; (200002fc <_hook_cycle+0x238>)
void OSC_CYCLE(const user_osc_param_t * const params,
               int32_t *yn,
               const uint32_t frames)
{  
  const uint8_t flags = s_state.flags;
  s_state.flags = k_flags_none;
200000dc:	2300      	movs	r3, #0
  
  const float drive = s_state.drive;

  const float lfo = s_state.lfo = q31_to_f32(params->shape_lfo);
200000de:	eefa 7ae0 	vcvt.f32.s32	s15, s15, #31
void OSC_CYCLE(const user_osc_param_t * const params,
               int32_t *yn,
               const uint32_t frames)
{  
  const uint8_t flags = s_state.flags;
  s_state.flags = k_flags_none;
200000e2:	7323      	strb	r3, [r4, #12]
  
  const float drive = s_state.drive;

  const float lfo = s_state.lfo = q31_to_f32(params->shape_lfo);
  float lfoz = (flags & k_flag_reset) ? lfo : s_state.lfoz;
200000e4:	f018 0301 	ands.w	r3, r8, #1
}

void OSC_CYCLE(const user_osc_param_t * const params,
               int32_t *yn,
               const uint32_t frames)
{  
200000e8:	ed2d 8b08 	vpush	{d8-d11}
  
  const float drive = s_state.drive;

  const float lfo = s_state.lfo = q31_to_f32(params->shape_lfo);
  float lfoz = (flags & k_flag_reset) ? lfo : s_state.lfoz;
  const float lfo_inc = (lfo - lfoz) / frames;
200000ec:	ee07 2a10 	vmov	s14, r2
  s_state.flags = k_flags_none;
  
  const float drive = s_state.drive;

  const float lfo = s_state.lfo = q31_to_f32(params->shape_lfo);
  float lfoz = (flags & k_flag_reset) ? lfo : s_state.lfoz;
200000f0:	bf08      	it	eq
200000f2:	ed94 aa02 	vldreq	s20, [r4, #8]
  const uint8_t flags = s_state.flags;
  s_state.flags = k_flags_none;
  
  const float drive = s_state.drive;

  const float lfo = s_state.lfo = q31_to_f32(params->shape_lfo);
200000f6:	edc4 7a01 	vstr	s15, [r4, #4]
  float lfoz = (flags & k_flag_reset) ? lfo : s_state.lfoz;
200000fa:	bf18      	it	ne
200000fc:	eeb0 aa67 	vmovne.f32	s20, s15
  const float lfo_inc = (lfo - lfoz) / frames;
20000100:	ee77 7aca 	vsub.f32	s15, s15, s20
20000104:	eeb8 7a47 	vcvt.f32.u32	s14, s14
}

void OSC_CYCLE(const user_osc_param_t * const params,
               int32_t *yn,
               const uint32_t frames)
{  
20000108:	b085      	sub	sp, #20
  
  const float drive = s_state.drive;

  const float lfo = s_state.lfo = q31_to_f32(params->shape_lfo);
  float lfoz = (flags & k_flag_reset) ? lfo : s_state.lfoz;
  const float lfo_inc = (lfo - lfoz) / frames;
2000010a:	ee87 8a87 	vdiv.f32	s16, s15, s14
  s_state.flags = k_flags_none;
  
  const float drive = s_state.drive;

  const float lfo = s_state.lfo = q31_to_f32(params->shape_lfo);
  float lfoz = (flags & k_flag_reset) ? lfo : s_state.lfoz;
2000010e:	9301      	str	r3, [sp, #4]
  const float lfo_inc = (lfo - lfoz) / frames;
  
  q31_t * __restrict y = (q31_t *)yn;
  const q31_t * y_e = y + frames;

  uint8_t voices = s_state.voices;
20000110:	fa5f f389 	uxtb.w	r3, r9
  const float lfo = s_state.lfo = q31_to_f32(params->shape_lfo);
  float lfoz = (flags & k_flag_reset) ? lfo : s_state.lfoz;
  const float lfo_inc = (lfo - lfoz) / frames;
  
  q31_t * __restrict y = (q31_t *)yn;
  const q31_t * y_e = y + frames;
20000114:	eb01 0882 	add.w	r8, r1, r2, lsl #2
  uint8_t voices = s_state.voices;
  uint8_t detune = s_state.detune;

  // reset instances phase increment and phase
  int i;
  for (i = 0; i < voices && i < maxVoice; i++) {
20000118:	4a79      	ldr	r2, [pc, #484]	; (20000300 <_hook_cycle+0x23c>)
}

void OSC_CYCLE(const user_osc_param_t * const params,
               int32_t *yn,
               const uint32_t frames)
{  
2000011a:	460e      	mov	r6, r1
2000011c:	4682      	mov	sl, r0
  uint8_t voices = s_state.voices;
  uint8_t detune = s_state.detune;

  // reset instances phase increment and phase
  int i;
  for (i = 0; i < voices && i < maxVoice; i++) {
2000011e:	2500      	movs	r5, #0
20000120:	4659      	mov	r1, fp
  const float lfo_inc = (lfo - lfoz) / frames;
  
  q31_t * __restrict y = (q31_t *)yn;
  const q31_t * y_e = y + frames;

  uint8_t voices = s_state.voices;
20000122:	ee09 3a10 	vmov	s18, r3
               const uint32_t frames)
{  
  const uint8_t flags = s_state.flags;
  s_state.flags = k_flags_none;
  
  const float drive = s_state.drive;
20000126:	edd4 8a00 	vldr	s17, [r4]
  
  q31_t * __restrict y = (q31_t *)yn;
  const q31_t * y_e = y + frames;

  uint8_t voices = s_state.voices;
  uint8_t detune = s_state.detune;
2000012a:	6963      	ldr	r3, [r4, #20]
2000012c:	9300      	str	r3, [sp, #0]
2000012e:	fa5f f089 	uxtb.w	r0, r9

  // reset instances phase increment and phase
  int i;
  for (i = 0; i < voices && i < maxVoice; i++) {
20000132:	4285      	cmp	r5, r0
20000134:	db05      	blt.n	20000142 <_hook_cycle+0x7e>
20000136:	eef7 9a00 	vmov.f32	s19, #112	; 0x3f800000  1.0
  }
  
  // write to buffer
  for (; y != y_e; ) {
	float totalSig = 0.0f;
	for (i = 0; i < voices && i < maxVoice; i++) {
2000013a:	4d71      	ldr	r5, [pc, #452]	; (20000300 <_hook_cycle+0x23c>)
2000013c:	eef0 ba69 	vmov.f32	s23, s19
20000140:	e0b8      	b.n	200002b4 <_hook_cycle+0x1f0>
  uint8_t voices = s_state.voices;
  uint8_t detune = s_state.detune;

  // reset instances phase increment and phase
  int i;
  for (i = 0; i < voices && i < maxVoice; i++) {
20000142:	6813      	ldr	r3, [r2, #0]
20000144:	429d      	cmp	r5, r3
20000146:	daf6      	bge.n	20000136 <_hook_cycle+0x72>
		int32_t fineAdj = (i - voices >> 1) * detune;
		uint16_t voicePitch = adjustPitch(params->pitch, fineAdj);
20000148:	f8ba c004 	ldrh.w	ip, [sl, #4]
	uint8_t pitch = note >> 8; 
	uint8_t mod = note & 0xFF;
	uint16_t res = 0;

	// apply fine adjustment
	int32_t pitchChange = (fineAdjust + mod) / 255;
2000014c:	f89d 3000 	ldrb.w	r3, [sp]

/** Linear interpolation
 */
static inline __attribute__((optimize("Ofast"), always_inline))
float linintf(const float fr, const float x0, const float x1) {
  return x0 + fr * (x1 - x0);
20000150:	eddf 6a6c 	vldr	s13, [pc, #432]	; 20000304 <_hook_cycle+0x240>
20000154:	1a28      	subs	r0, r5, r0
}

__fast_inline uint16_t adjustPitch(uint16_t note, int32_t fineAdjust) {
	// high byte = note number, low byte = fine
	// mod 0 - 255 only adds to original pitch, negative mod applied as note - 1 + (255 + mod)
	uint8_t pitch = note >> 8; 
20000156:	ea4f 2e1c 	mov.w	lr, ip, lsr #8
	uint8_t mod = note & 0xFF;
	uint16_t res = 0;

	// apply fine adjustment
	int32_t pitchChange = (fineAdjust + mod) / 255;
2000015a:	1040      	asrs	r0, r0, #1
2000015c:	fa5f fc8c 	uxtb.w	ip, ip
20000160:	fb03 c000 	mla	r0, r3, r0, ip
20000164:	23ff      	movs	r3, #255	; 0xff
20000166:	fb90 f3f3 	sdiv	r3, r0, r3
	int32_t adjustedMod = (fineAdjust + mod) % 255;
2000016a:	ebc3 2c03 	rsb	ip, r3, r3, lsl #8
	if (adjustedMod < 0) {
2000016e:	ebb0 000c 	subs.w	r0, r0, ip
		pitchChange--;
20000172:	bf48      	it	mi
20000174:	f103 33ff 	addmi.w	r3, r3, #4294967295
		adjustedMod += 0xFF;
	} 
	pitch += pitchChange;
	mod = adjustedMod;

	res = pitch;
20000178:	4473      	add	r3, lr
	// apply fine adjustment
	int32_t pitchChange = (fineAdjust + mod) / 255;
	int32_t adjustedMod = (fineAdjust + mod) % 255;
	if (adjustedMod < 0) {
		pitchChange--;
		adjustedMod += 0xFF;
2000017a:	bf48      	it	mi
2000017c:	30ff      	addmi	r0, #255	; 0xff
	pitch += pitchChange;
	mod = adjustedMod;

	res = pitch;
	res = res << 8;
	res |= mod;
2000017e:	ea40 2003 	orr.w	r0, r0, r3, lsl #8
20000182:	b280      	uxth	r0, r0
  // reset instances phase increment and phase
  int i;
  for (i = 0; i < voices && i < maxVoice; i++) {
		int32_t fineAdj = (i - voices >> 1) * detune;
		uint16_t voicePitch = adjustPitch(params->pitch, fineAdj);
		instances[i].w0 = osc_w0f_for_note(voicePitch >> 8, voicePitch & 0xFF);
20000184:	1203      	asrs	r3, r0, #8
20000186:	2b96      	cmp	r3, #150	; 0x96
20000188:	bfd8      	it	le
2000018a:	469e      	movle	lr, r3
2000018c:	b2c0      	uxtb	r0, r0
   * @param note Note in [0-151] range, mod in [0-255] range.
   * @return     Corresponding 0-1 phase increment in floating point.
   */
  __fast_inline float osc_w0f_for_note(uint8_t note, uint8_t mod) {    
    const float f0 = osc_notehzf(note);
    const float f1 = osc_notehzf(note+1);
2000018e:	f103 0301 	add.w	r3, r3, #1
20000192:	b2db      	uxtb	r3, r3
20000194:	ee07 0a90 	vmov	s15, r0
   *
   * @param note Note in [0-151] range.
   * @return     Corresponding Hertz value.
   */
  __fast_inline float osc_notehzf(uint8_t note) {
    return midi_to_hz_lut_f[clipmaxu32(note,k_midi_to_hz_size-1)];
20000198:	bfc8      	it	gt
2000019a:	f04f 0e97 	movgt.w	lr, #151	; 0x97
2000019e:	2b96      	cmp	r3, #150	; 0x96
200001a0:	bf88      	it	hi
200001a2:	2397      	movhi	r3, #151	; 0x97
200001a4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
200001a8:	eb01 0383 	add.w	r3, r1, r3, lsl #2
200001ac:	eb0b 0e8e 	add.w	lr, fp, lr, lsl #2
200001b0:	ee67 7aa6 	vmul.f32	s15, s15, s13
200001b4:	ed9e 7a00 	vldr	s14, [lr]
200001b8:	edd3 6a00 	vldr	s13, [r3]
		if (flags & k_flag_reset) {
200001bc:	9b01      	ldr	r3, [sp, #4]
200001be:	ee76 6ac7 	vsub.f32	s13, s13, s14
200001c2:	eea7 7aa6 	vfma.f32	s14, s15, s13

/** FSEL construct
 */
static inline __attribute__((optimize("Ofast"),always_inline))
float fsel(const float a, const float b, const float c) {
  return (a >= 0) ? b : c;
200001c6:	eddf 7a50 	vldr	s15, [pc, #320]	; 20000308 <_hook_cycle+0x244>
200001ca:	eeb4 7ae7 	vcmpe.f32	s14, s15
200001ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
200001d2:	bfb8      	it	lt
200001d4:	eef0 7a47 	vmovlt.f32	s15, s14
  // reset instances phase increment and phase
  int i;
  for (i = 0; i < voices && i < maxVoice; i++) {
		int32_t fineAdj = (i - voices >> 1) * detune;
		uint16_t voicePitch = adjustPitch(params->pitch, fineAdj);
		instances[i].w0 = osc_w0f_for_note(voicePitch >> 8, voicePitch & 0xFF);
200001d8:	ed9f 7a4c 	vldr	s14, [pc, #304]	; 2000030c <_hook_cycle+0x248>
200001dc:	ee67 7a87 	vmul.f32	s15, s15, s14
200001e0:	edc7 7a00 	vstr	s15, [r7]
		if (flags & k_flag_reset) {
200001e4:	b16b      	cbz	r3, 20000202 <_hook_cycle+0x13e>
			instances[i].phase = s_state.phaseSync ? 0.f : osc_white();
200001e6:	f994 301d 	ldrsb.w	r3, [r4, #29]
200001ea:	b933      	cbnz	r3, 200001fa <_hook_cycle+0x136>
200001ec:	9103      	str	r1, [sp, #12]
200001ee:	9202      	str	r2, [sp, #8]
   * @return     Value in [-1.0, 1.0].
   */
  float _osc_white(void);

  __fast_inline float osc_white(void) {
    return _osc_white();
200001f0:	f000 f906 	bl	20000400 <___osc_white_veneer>
200001f4:	9a02      	ldr	r2, [sp, #8]
200001f6:	9903      	ldr	r1, [sp, #12]
200001f8:	e001      	b.n	200001fe <_hook_cycle+0x13a>
200001fa:	ed9f 0a45 	vldr	s0, [pc, #276]	; 20000310 <_hook_cycle+0x24c>
200001fe:	ed07 0a01 	vstr	s0, [r7, #-4]
  uint8_t voices = s_state.voices;
  uint8_t detune = s_state.detune;

  // reset instances phase increment and phase
  int i;
  for (i = 0; i < voices && i < maxVoice; i++) {
20000202:	3501      	adds	r5, #1
20000204:	370c      	adds	r7, #12
20000206:	e792      	b.n	2000012e <_hook_cycle+0x6a>
  }
  
  // write to buffer
  for (; y != y_e; ) {
	float totalSig = 0.0f;
	for (i = 0; i < voices && i < maxVoice; i++) {
20000208:	428a      	cmp	r2, r1
2000020a:	da25      	bge.n	20000258 <_hook_cycle+0x194>
		float phase = instances[i].phase;
2000020c:	ed53 7a02 	vldr	s15, [r3, #-8]
	res |= mod;
	return res;
}

__fast_inline float generate(int8_t waveform, float phase) {
	if (waveform == 0) {
20000210:	2f00      	cmp	r7, #0
20000212:	d15f      	bne.n	200002d4 <_hook_cycle+0x210>
		return (2.0f - 2 * phase) - 1.0f;
20000214:	ee39 7ae7 	vsub.f32	s14, s19, s15
20000218:	eeb0 6a66 	vmov.f32	s12, s13
2000021c:	eea7 6a24 	vfma.f32	s12, s14, s9
20000220:	eeb0 7a46 	vmov.f32	s14, s12
  // write to buffer
  for (; y != y_e; ) {
	float totalSig = 0.0f;
	for (i = 0; i < voices && i < maxVoice; i++) {
		float phase = instances[i].phase;
		totalSig += generate(s_state.waveform, phase) * instances[i].level * (1.0f / (float)voices);
20000224:	ed93 6a00 	vldr	s12, [r3]
20000228:	eef8 5a49 	vcvt.f32.u32	s11, s18
2000022c:	ee27 7a06 	vmul.f32	s14, s14, s12
20000230:	ee89 6aa5 	vdiv.f32	s12, s19, s11
  }
  
  // write to buffer
  for (; y != y_e; ) {
	float totalSig = 0.0f;
	for (i = 0; i < voices && i < maxVoice; i++) {
20000234:	3201      	adds	r2, #1
20000236:	330c      	adds	r3, #12
		float phase = instances[i].phase;
		totalSig += generate(s_state.waveform, phase) * instances[i].level * (1.0f / (float)voices);
20000238:	eea7 ba06 	vfma.f32	s22, s14, s12
		phase += instances[i].w0;
2000023c:	ed13 7a04 	vldr	s14, [r3, #-16]
20000240:	ee77 7a87 	vadd.f32	s15, s15, s14
		phase -= (uint32_t) phase;
20000244:	eebc 7ae7 	vcvt.u32.f32	s14, s15
20000248:	eeb8 7a47 	vcvt.f32.u32	s14, s14
		instances[i].phase = phase;
2000024c:	ee77 7ac7 	vsub.f32	s15, s15, s14
20000250:	ed43 7a05 	vstr	s15, [r3, #-20]	; 0xffffffec
  }
  
  // write to buffer
  for (; y != y_e; ) {
	float totalSig = 0.0f;
	for (i = 0; i < voices && i < maxVoice; i++) {
20000254:	4282      	cmp	r2, r0
20000256:	d1d7      	bne.n	20000208 <_hook_cycle+0x144>
20000258:	9000      	str	r0, [sp, #0]
		phase += instances[i].w0;
		phase -= (uint32_t) phase;
		instances[i].phase = phase;
	}

	totalSig = totalSig * (1.f - s_state.noiseLevel) + osc_white() * s_state.noiseLevel;
2000025a:	edd4 aa06 	vldr	s21, [r4, #24]
2000025e:	f000 f8cf 	bl	20000400 <___osc_white_veneer>
	const float sig  = osc_softclipf(0.05f, drive * totalSig);
20000262:	edd4 7a06 	vldr	s15, [r4, #24]
20000266:	9800      	ldr	r0, [sp, #0]
20000268:	ee20 0a27 	vmul.f32	s0, s0, s15
		phase += instances[i].w0;
		phase -= (uint32_t) phase;
		instances[i].phase = phase;
	}

	totalSig = totalSig * (1.f - s_state.noiseLevel) + osc_white() * s_state.noiseLevel;
2000026c:	ee7b aaea 	vsub.f32	s21, s23, s21
	const float sig  = osc_softclipf(0.05f, drive * totalSig);
20000270:	eeab 0a2a 	vfma.f32	s0, s22, s21
20000274:	ee60 7a28 	vmul.f32	s15, s0, s17
20000278:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
2000027c:	eef4 7ac0 	vcmpe.f32	s15, s0
20000280:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
20000284:	db08      	blt.n	20000298 <_hook_cycle+0x1d4>
20000286:	eef4 7ae9 	vcmpe.f32	s15, s19
2000028a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
2000028e:	bfb4      	ite	lt
20000290:	eeb0 0a67 	vmovlt.f32	s0, s15
20000294:	eeb0 0a69 	vmovge.f32	s0, s19
	*(y++) = f32_to_q31(sig);
20000298:	ee60 7a00 	vmul.f32	s15, s0, s0
2000029c:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 20000314 <_hook_cycle+0x250>
200002a0:	ee60 7a67 	vnmul.f32	s15, s0, s15
    lfoz += lfo_inc;
200002a4:	ee3a aa08 	vadd.f32	s20, s20, s16
		instances[i].phase = phase;
	}

	totalSig = totalSig * (1.f - s_state.noiseLevel) + osc_white() * s_state.noiseLevel;
	const float sig  = osc_softclipf(0.05f, drive * totalSig);
	*(y++) = f32_to_q31(sig);
200002a8:	eea7 0a87 	vfma.f32	s0, s15, s14
200002ac:	eebe 0ae0 	vcvt.s32.f32	s0, s0, #31
200002b0:	eca6 0a01 	vstmia	r6!, {s0}
			instances[i].phase = s_state.phaseSync ? 0.f : osc_white();
		}
  }
  
  // write to buffer
  for (; y != y_e; ) {
200002b4:	4546      	cmp	r6, r8
200002b6:	d017      	beq.n	200002e8 <_hook_cycle+0x224>
	float totalSig = 0.0f;
	for (i = 0; i < voices && i < maxVoice; i++) {
200002b8:	6829      	ldr	r1, [r5, #0]
		float phase = instances[i].phase;
		totalSig += generate(s_state.waveform, phase) * instances[i].level * (1.0f / (float)voices);
200002ba:	f994 701c 	ldrsb.w	r7, [r4, #28]
200002be:	4b16      	ldr	r3, [pc, #88]	; (20000318 <_hook_cycle+0x254>)
200002c0:	ed9f ba13 	vldr	s22, [pc, #76]	; 20000310 <_hook_cycle+0x24c>
200002c4:	2200      	movs	r2, #0

__fast_inline float generate(int8_t waveform, float phase) {
	if (waveform == 0) {
		return (2.0f - 2 * phase) - 1.0f;
	}
	return phase > 0.5f ? -1.0f : 1.0f;
200002c6:	eeb6 5a00 	vmov.f32	s10, #96	; 0x3f000000  0.5
200002ca:	eeff 6a00 	vmov.f32	s13, #240	; 0xbf800000 -1.0
	return res;
}

__fast_inline float generate(int8_t waveform, float phase) {
	if (waveform == 0) {
		return (2.0f - 2 * phase) - 1.0f;
200002ce:	eef0 4a00 	vmov.f32	s9, #0	; 0x40000000  2.0
200002d2:	e7bf      	b.n	20000254 <_hook_cycle+0x190>
	}
	return phase > 0.5f ? -1.0f : 1.0f;
200002d4:	eef4 7ac5 	vcmpe.f32	s15, s10
200002d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
200002dc:	bfd4      	ite	le
200002de:	eeb0 7a69 	vmovle.f32	s14, s19
200002e2:	eeb0 7a66 	vmovgt.f32	s14, s13
200002e6:	e79d      	b.n	20000224 <_hook_cycle+0x160>
	const float sig  = osc_softclipf(0.05f, drive * totalSig);
	*(y++) = f32_to_q31(sig);
    lfoz += lfo_inc;
  }
  
  s_state.lfoz = lfoz;
200002e8:	ed84 aa02 	vstr	s20, [r4, #8]
}
200002ec:	b005      	add	sp, #20
200002ee:	ecbd 8b08 	vpop	{d8-d11}
200002f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
200002f6:	bf00      	nop
200002f8:	20000410 	.word	0x20000410
200002fc:	20000438 	.word	0x20000438
20000300:	20000408 	.word	0x20000408
20000304:	3b808081 	.word	0x3b808081
20000308:	46b8ff49 	.word	0x46b8ff49
2000030c:	37aec33e 	.word	0x37aec33e
20000310:	00000000 	.word	0x00000000
20000314:	3d4ccccd 	.word	0x3d4ccccd
20000318:	2000043c 	.word	0x2000043c
2000031c:	0800f100 	.word	0x0800f100

20000320 <_hook_on>:

void OSC_NOTEON(const user_osc_param_t * const params)
{
  s_state.flags |= k_flag_reset;
20000320:	4a02      	ldr	r2, [pc, #8]	; (2000032c <_hook_on+0xc>)
20000322:	7b13      	ldrb	r3, [r2, #12]
20000324:	f043 0301 	orr.w	r3, r3, #1
20000328:	7313      	strb	r3, [r2, #12]
2000032a:	4770      	bx	lr
2000032c:	20000410 	.word	0x20000410

20000330 <_hook_off>:
}

void OSC_NOTEOFF(const user_osc_param_t * const params)
{
20000330:	4770      	bx	lr

20000332 <_Z17updateVoiceLevelsv>:
  (void)params;
}

void updateVoiceLevels() {
	int i;
	float voice_count = s_state.voices;
20000332:	4b19      	ldr	r3, [pc, #100]	; (20000398 <_Z17updateVoiceLevelsv+0x66>)
	float mid = voice_count / 2.f;
	for (i = 0; i < voice_count && i < maxVoice; i++) {
20000334:	4a19      	ldr	r2, [pc, #100]	; (2000039c <_Z17updateVoiceLevelsv+0x6a>)
  (void)params;
}

void updateVoiceLevels() {
	int i;
	float voice_count = s_state.voices;
20000336:	edd3 7a04 	vldr	s15, [r3, #16]
	float mid = voice_count / 2.f;
	for (i = 0; i < voice_count && i < maxVoice; i++) {
2000033a:	6811      	ldr	r1, [r2, #0]
		instances[i].level = (i > mid) ? (float) (mid - i) : (float) (i - mid);
		instances[i].level = (instances[i].level + mid) / mid;
		instances[i].level = instances[i].level * s_state.sideLevel + (1.f - s_state.sideLevel);
2000033c:	ed93 6a08 	vldr	s12, [r3, #32]
  (void)params;
}

void updateVoiceLevels() {
	int i;
	float voice_count = s_state.voices;
20000340:	eef8 6ae7 	vcvt.f32.s32	s13, s15
	float mid = voice_count / 2.f;
20000344:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
20000348:	ee26 7a87 	vmul.f32	s14, s13, s14
2000034c:	3324      	adds	r3, #36	; 0x24
	for (i = 0; i < voice_count && i < maxVoice; i++) {
2000034e:	2200      	movs	r2, #0
		instances[i].level = (i > mid) ? (float) (mid - i) : (float) (i - mid);
		instances[i].level = (instances[i].level + mid) / mid;
		instances[i].level = instances[i].level * s_state.sideLevel + (1.f - s_state.sideLevel);
20000350:	eeb7 5a00 	vmov.f32	s10, #112	; 0x3f800000  1.0

void updateVoiceLevels() {
	int i;
	float voice_count = s_state.voices;
	float mid = voice_count / 2.f;
	for (i = 0; i < voice_count && i < maxVoice; i++) {
20000354:	ee07 2a90 	vmov	s15, r2
20000358:	eef8 7ae7 	vcvt.f32.s32	s15, s15
2000035c:	eef4 6ae7 	vcmpe.f32	s13, s15
20000360:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
20000364:	dd17      	ble.n	20000396 <_Z17updateVoiceLevelsv+0x64>
20000366:	428a      	cmp	r2, r1
20000368:	da15      	bge.n	20000396 <_Z17updateVoiceLevelsv+0x64>
		instances[i].level = (i > mid) ? (float) (mid - i) : (float) (i - mid);
2000036a:	eeb4 7ae7 	vcmpe.f32	s14, s15
2000036e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
20000372:	bf4c      	ite	mi
20000374:	ee77 7a67 	vsubmi.f32	s15, s14, s15
20000378:	ee77 7ac7 	vsubpl.f32	s15, s15, s14

void updateVoiceLevels() {
	int i;
	float voice_count = s_state.voices;
	float mid = voice_count / 2.f;
	for (i = 0; i < voice_count && i < maxVoice; i++) {
2000037c:	3201      	adds	r2, #1
		instances[i].level = (i > mid) ? (float) (mid - i) : (float) (i - mid);
		instances[i].level = (instances[i].level + mid) / mid;
		instances[i].level = instances[i].level * s_state.sideLevel + (1.f - s_state.sideLevel);
2000037e:	ee77 7a87 	vadd.f32	s15, s15, s14
20000382:	330c      	adds	r3, #12
20000384:	eec7 5a87 	vdiv.f32	s11, s15, s14
20000388:	ee75 7a46 	vsub.f32	s15, s10, s12
2000038c:	eee5 7a86 	vfma.f32	s15, s11, s12
20000390:	ed43 7a01 	vstr	s15, [r3, #-4]

void updateVoiceLevels() {
	int i;
	float voice_count = s_state.voices;
	float mid = voice_count / 2.f;
	for (i = 0; i < voice_count && i < maxVoice; i++) {
20000394:	e7de      	b.n	20000354 <_Z17updateVoiceLevelsv+0x22>
20000396:	4770      	bx	lr
20000398:	20000410 	.word	0x20000410
2000039c:	20000408 	.word	0x20000408

200003a0 <_hook_param>:
	}
}

void OSC_PARAM(uint16_t index, uint16_t value)
{
  const float valf = param_val_to_f32(value);
200003a0:	ee07 1a90 	vmov	s15, r1
200003a4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
  
  switch (index) {
200003a8:	2805      	cmp	r0, #5
200003aa:	d824      	bhi.n	200003f6 <_hook_param+0x56>
200003ac:	e8df f000 	tbb	[pc, r0]
200003b0:	140c0803 	.word	0x140c0803
200003b4:	1a17      	.short	0x1a17
  case k_user_osc_param_id1:
	 s_state.voices = value + 1;
200003b6:	4b10      	ldr	r3, [pc, #64]	; (200003f8 <_hook_param+0x58>)
200003b8:	3101      	adds	r1, #1
200003ba:	6119      	str	r1, [r3, #16]
	 updateVoiceLevels();
200003bc:	f7ff bfb9 	b.w	20000332 <_Z17updateVoiceLevelsv>
	 break;
  case k_user_osc_param_id2:
	 s_state.detune = value + 1;
200003c0:	4b0d      	ldr	r3, [pc, #52]	; (200003f8 <_hook_param+0x58>)
200003c2:	3101      	adds	r1, #1
200003c4:	6159      	str	r1, [r3, #20]
	 break;
200003c6:	4770      	bx	lr
  case k_user_osc_param_id3:
	 s_state.noiseLevel = value / 100.f;
200003c8:	eddf 6a0c 	vldr	s13, [pc, #48]	; 200003fc <_hook_param+0x5c>
200003cc:	4b0a      	ldr	r3, [pc, #40]	; (200003f8 <_hook_param+0x58>)
200003ce:	ee87 7aa6 	vdiv.f32	s14, s15, s13
200003d2:	ed83 7a06 	vstr	s14, [r3, #24]
	 break;
200003d6:	4770      	bx	lr
  case k_user_osc_param_id4:
	 s_state.waveform = value;
200003d8:	4b07      	ldr	r3, [pc, #28]	; (200003f8 <_hook_param+0x58>)
200003da:	7719      	strb	r1, [r3, #28]
	 break;
200003dc:	4770      	bx	lr
  case k_user_osc_param_id5:
	 s_state.phaseSync = value;
200003de:	4b06      	ldr	r3, [pc, #24]	; (200003f8 <_hook_param+0x58>)
200003e0:	7759      	strb	r1, [r3, #29]
	 break;
200003e2:	4770      	bx	lr
  case k_user_osc_param_id6:
	 s_state.sideLevel = value / 100.f;
200003e4:	eddf 6a05 	vldr	s13, [pc, #20]	; 200003fc <_hook_param+0x5c>
200003e8:	4b03      	ldr	r3, [pc, #12]	; (200003f8 <_hook_param+0x58>)
200003ea:	ee87 7aa6 	vdiv.f32	s14, s15, s13
200003ee:	ed83 7a08 	vstr	s14, [r3, #32]
	 updateVoiceLevels();
200003f2:	f7ff bf9e 	b.w	20000332 <_Z17updateVoiceLevelsv>
200003f6:	4770      	bx	lr
200003f8:	20000410 	.word	0x20000410
200003fc:	42c80000 	.word	0x42c80000

20000400 <___osc_white_veneer>:
20000400:	f85f f000 	ldr.w	pc, [pc]	; 20000404 <___osc_white_veneer+0x4>
20000404:	0801edb9 	.word	0x0801edb9
